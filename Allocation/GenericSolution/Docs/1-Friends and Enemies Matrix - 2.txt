Intersection Group
G1 A1,A2,A3,A4
G2 A2,A5,A6
G3 A1,A7,A8

Bit Matrix (Friends & Enemies Matrix) OR (Activity/Acti)
If there is intersection between elements set index to zero
Zero for enemy and One for friend
Zero = Enemy
One	= Friend
	A1	A2	A3	A4	A5	A6	A7	A8
A1	0	0	0	0   1   1	0	0	Activity Friends Enemies = AFE
A2	0	0	0	0   0   0	1	1
A3	0	0	0	0   1   1	1	1
A4	0	0	0	0   1   1	1	1
A5	1   0   1   1   0   0	1	1
A6	1   0   1   1   0   0	1	1
A7	0   1   1   1   1   1	0	0
A8	0   1   1   1   1   1	0	0

From bit matrix we can find which element can be after each elemnt (a friend)
And Wich can't be (an enemy)


Activity can be placed in time slot if
	slot contains friends 
	or slot is empty
	these two condetions translated to 
	if (AFE & Tx == Tx)can be allocated to Tx;
	else >> can't be allocated to Tx;

Time/Activity Matrix (Allocation Matrix)
	A1	A2	A3	A4	A5	A6	A7	A8
T1 	0	0	0	0	0	0	0	0
T2	0	0	0	0	0	0	0	0
T3 	0	0	0	0	0	0	0	0
T4 	0	0	0	0	0	0	0	0
.	0	0	0	0	0	0	0	0
.	0	0	0	0	0	0	0	0
.	0	0	0	0	0	0	0	0
Tn	0	0	0	0	0	0	0	0


Select group with largest count of activities ,in this case G1
Allocate all it's element
	Allocate A1 in any time slot
	A1 & T1
	0	0	0	0   1   1	0	0
	0	0	0	0	0	0	0	0
	=
	0	0	0	0	0	0	0	0  == T1
	Then allocate A1 to T1
	T1	1	0	0	0	0	0	0	0

	A2 & T1
	0	0	0	0   0   0	1	1
	1	0	0	0	0	0	0	0
	=
	0	0	0	0   0   0	0	1 != T2
	A2 & T0
	0	0	0	0   0   0	1	1
	0	0	0	0	0	0	0	0
	=
	0	0	0	0   0   0	0	0 == T2
	And the same with A3,A4
	T1 	1	0	0	0	0	0	0	0
	T2	0	1	0	0	0	0	0	0
	T3 	0	0	1	0	0	0	0	0
	T4 	0	0	0	1	0	0	0	0
Allocate G2(A2,A5,A6)
	A2 is allocated
	A5 & T1 
	1   0   1   1   0   0	1	1
	1	0	0	0	0	0	0	0
	=
	1	0	0	0	0	0	0	0 == T1
	Allocate A5 in T1
	T1	1	0	0	0	1	0	0	0
	
	A6	& T1 != T1
	A6	& T2 != T2
	A6	& T3 == T3 Allocate A6 in T3
	A6	1   0   1   1   0   0	1	1
	
	T1	1	0	0	0	1	0	0	0
	T2	0	1	0	0	0	0	0	0
	T3 	0	0	1	0	0	1	0	0
	T4 	0	0	0	1	0	0	0	0

	A7	0   1   1   1   1   1	0	0
	A7 & T1 != T1 
	A7 & T2 == T2  Allocate A7 in T2
	T1	1	0	0	0	1	0	0	0
	T2	0	1	0	0	0	0	1	0
	T3 	0	0	1	0	0	1	0	0
	T4 	0	0	0	1	0	0	0	0

	A8	0   1   1   1   1   1	0	0
	A8 & T1 != T1
	A8 & T2 != T2
	A8 & T2 == T3 Allocate A8 in T3
	T1	1	0	0	0	1	0	0	0
	T2	0	1	0	0	0	0	1	0
	T3 	0	0	1	0	0	1	0	1
	T4 	0	0	0	1	0	0	0	0

Solution is 
T1	A1,A5
T2	A2,A7
T3	A3,A6,A8
T4	A4

Availability Matrix 
From the solution we create a Matrix by and all activities in a time slot
AVn= AndAll(Activities in Tn)
AV1	0	0	0	0   0   0	0	0	= A1&A5 = No item can be moved to T1
AV2	0	0	0	0   0   0	0	0	= A2&A7	= No item can be moved to T2
AV3	0	0	0	0   0   0	0	0	= A3&A6&A8	= No item can be moved to T3
AV4	0	0	0	0   1   1	1	1	= A4 = A5,A6,A7,A8 can be moved to T4

	A1	A2	A3	A4	A5	A6	A7	A8
A1	0	0	0	0   1   1	0	0
A2	0	0	0	0   0   0	1	1
A3	0	0	0	0   1   1	1	1
A4	0	0	0	0   1   1	1	1
A5	1   0   1   1   0   0	1	1
A6	1   0   1   1   0   0	1	1
A7	0   1   1   1   1   1	0	0
A8	0   1   1   1   1   1	0	0
=======
Order Constrains
Imagine if we adde order constrains like:
4 must be before 1 and 7
7 must be after 6
3 must be after 6 

the solution with no intersection was
T1 	1,5
T2	2,7
T3 	3,6,8
T4 	4

Can we generate table now??!!
Swap rows to match "4 must be done before 1 and 7"
T4 	4
T1 	1,5
T2	2,7
T3 	3,6,8
Swap rows to match "7 must be done after 6"
T4 	4
T1 	1,5
T3 	3,6,8
T2	2,7
For constrain "3 must be after 6 " we need to move 3 or 6
FG(3) > 5,6,7,8
FG(6) > 1,3,4,7,8
3 can't be move to T2 because FG(3)
6 can be moved to T4
T4 	4,6
T1 	1,5
T3 	3,8
T2	2,7
Revaluate Constrains:
4 must be before 1 and 7:true
7 must be after 6:true
3 must be after 6:true 

Rename time labels
T1 	4,6
T2 	1,5
T3 	3,8
T4	2,7

========
# Can we efficiently save matrix for available times per activity while we allocate them (in the same loop).
Yes, we alerday.
If we save a list contains activites and it's allocated time slot (Allocation Place List) like:
A	 P
1	 T2
2	 T4
3	 T3
4	 T1
5	 T2
6	 T1
7	 T4
8	 T3
From the bit matrix (Friends & Enemies Matrix) we can find activity enemies and from the allocation place list
we can find enimies locations.
Where enimies exist activity can't be placed

Now with	solution 
T1 	4,6		 0	0	0	1	0	1	0	0
T2 	1,5		 1	0	0	0	1	0	0	0
T3 	3,8		 0	0	1	0	0	0	0	1
T4	2,7		 0	1	0	0	0	0	1	0





Friens
FG(1) > 5,6
FG(2) > 7,8	
FG(3) > 5,6,7,8
FG(4) > 5,6,7,8
FG(5) > 1,3,4,7,8
FG(6) > 1,3,4,7,8
FG(7) > 2,3,4,5,6
FG(8) > 2,3,4,5,6
Enemies
EG(1) > 2,3,4,7,8
EG(2) > 1,3,4,5,6
EG(3) > 1,2,4
EG(4) > 1,2,3
EG(5) > 2,6
EG(6) > 2,5
EG(7) > 1,7
EG(8) > 1,8
============
G1 1,2,3,4
G2 2,5,6
G3 1,7,8
========

G1 1,2,3,4
G2 2,5,6
G3 1,7,8

Now with solution 
T1 	4,6		 0	0	0	1	0	1	0	0
T2 	1,5		 1	0	0	0	1	0	0	0
T3 	3,8		 0	0	1	0	0	0	0	1
T4	2,7		 0	1	0	0	0	0	1	0


Friends/Enemies Matrix
	1	2	3	4	5	6	7	8
1   0	0	0	0   1   1	0	0
2   0	0	0	0   0   0	1	1
3   0	0	0	0   1   1	1	1
4   0	0	0	0   1   1	1	1
5   1   0   1   1   0   0	1	1
6   1   0   1   1   0   0	1	1
7   0   1   1   1   1   1	0	0
8   0   1   1   1   1   1	0	0

Current Time/Activity Matrix
T1	0	0	0	1	0	1	0	0
T2	1	0	0	0	1	0	0	0
T3	0	0	1	0	0	0	0	1
T4	0	1	0	0	0	0	1	0

Where we can move 8?
A8 & T1
A8	0   1   1   1   1   1	0	0
T1	0	0	0	1	0	1	0	0
	0	0	0	1	0	1	0	0 Same T1 >> Then A8 can moved to T1
	
A8 & T2
A8	0   1   1   1   1   1	0	0
T2	1	0	0	0	1	0	0	0
	0	0	0	0	1	0	0	0 Not Same T2
	
A8 & T4
A8	0   1   1   1   1   1	0	0
T3	0	1	0	0	0	0	1	0
	0	1	0	0	0	0	0	0 Not Same T4